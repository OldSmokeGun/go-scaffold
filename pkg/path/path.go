package path

import (
	"os"
	"path/filepath"
	"runtime"
	"strings"
)

// BinPath get the absolute path of this executable binary
//
// if running as a binary generated by go build, return the absolute path of the parent directory of the executable binary
//
// if running with go run, returns the absolute path of this project
func BinPath() (string, error) {
	binPath, err := os.Executable()
	if err != nil {
		return "", err
	}

	tmpDir := os.TempDir()
	if strings.HasPrefix(binPath, tmpDir) {
		return ProjectPath(), nil
	}

	return filepath.Dir(binPath), nil
}

// ProjectPath it is always the absolute path to this project
func ProjectPath() string {
	_, filename, _, ok := runtime.Caller(0)
	if ok {
		return filepath.Dir(filepath.Dir(filepath.Dir(filename)))
	}
	return ""
}

// AbsBinPath get the absolute path relative to the executable binary
func AbsBinPath(path string) (string, error) {
	bp, err := BinPath()
	if err != nil {
		return "", err
	}
	if !filepath.IsAbs(path) {
		path = filepath.Join(bp, path)
	}
	return path, nil
}

// AbsProjectPath get the absolute path relative to the project
func AbsProjectPath(path string) string {
	pp := ProjectPath()
	if !filepath.IsAbs(path) {
		path = filepath.Join(pp, path)
	}
	return path
}
